// Package shell provides functionality for generating shell environment configuration files.
package shell

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"
)

// GenerateEnvFile creates the env.sh file with environment variables
// pointing to the combined certificate bundle.
//
// The generated env.sh file sets the following environment variables:
//   - SSL_CERT_FILE (Python, Ruby, Go, curl, wget)
//   - REQUESTS_CA_BUNDLE (Python requests)
//   - NODE_EXTRA_CA_CERTS (Node.js, npm, yarn, pnpm)
//   - CURL_CA_BUNDLE (curl, libcurl)
//   - AWS_CA_BUNDLE (AWS CLI, boto3)
//   - GIT_SSL_CAINFO (git)
//
// Parameters:
//   - verifiHome: Path to the .verifi directory (e.g., ~/.verifi)
//   - bundlePath: Path to the combined certificate bundle (e.g., ~/.verifi/certs/bundles/combined-bundle.pem)
//
// Returns an error if the file cannot be written.
func GenerateEnvFile(verifiHome, bundlePath string) error {
	envPath := filepath.Join(verifiHome, "env.sh")

	// Convert Windows paths to forward slashes for shell compatibility.
	// Even on Windows (Git Bash, WSL), shell scripts use forward slashes.
	// Use filepath.ToSlash() for OS-specific conversion, then replace any
	// remaining backslashes for robustness across platforms.
	shellPath := filepath.ToSlash(bundlePath)
	shellPath = strings.ReplaceAll(shellPath, "\\", "/")

	content := fmt.Sprintf(`# verifi environment configuration
# Generated by verifi - do not edit manually

export SSL_CERT_FILE="%s"
export REQUESTS_CA_BUNDLE="%s"
export NODE_EXTRA_CA_CERTS="%s"
export CURL_CA_BUNDLE="%s"
export AWS_CA_BUNDLE="%s"
export GIT_SSL_CAINFO="%s"
`, shellPath, shellPath, shellPath, shellPath, shellPath, shellPath)

	return os.WriteFile(envPath, []byte(content), 0644)
}

// EnvFilePath returns the path to the env.sh file given the verifi home directory.
func EnvFilePath(verifiHome string) string {
	return filepath.Join(verifiHome, "env.sh")
}

// PrintSetupInstructions prints user-friendly instructions for sourcing the env.sh file.
// This function is called after successful env.sh generation to guide the user through
// the next steps.
func PrintSetupInstructions(envPath string) {
	fmt.Printf(`
âœ“ Environment file created: %s

To activate certificates for all tools, add this to your shell config:

  source %s

Quick setup:
  echo 'source %s' >> ~/.zshrc   # for zsh
  echo 'source %s' >> ~/.bashrc  # for bash

Then restart your shell or run:
  source ~/.zshrc  # or source ~/.bashrc

`, envPath, envPath, envPath, envPath)
}
